{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 554,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ashishperuri/anaconda3/lib/python3.7/site-packages/IPython/core/magics/pylab.py:160: UserWarning: pylab import has clobbered these variables: ['cm', 'gamma', 'close', 'clf', 'datetime']\n",
      "`%matplotlib` prevents importing * from pylab and numpy\n",
      "  \"\\n`%matplotlib` prevents importing * from pylab and numpy\"\n"
     ]
    }
   ],
   "source": [
    "%pylab inline\n",
    "import os\n",
    "import glob\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn')\n",
    "%matplotlib inline\n",
    "from datetime import datetime\n",
    "import sklearn\n",
    "from  sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import roc_curve, auc, confusion_matrix\n",
    "from matplotlib import animation\n",
    "import matplotlib.patches as mpatches\n",
    "from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "np.random.seed(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 555,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Class Which Contains Functions to preprocess data\n",
    "class DataPreprocessor:\n",
    "    \n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    def CustomSmoother(self, x, alpha):\n",
    "        \"\"\"\n",
    "        Function Returns Smoothed Vals\n",
    "        \"\"\"\n",
    "        s0 = x[0]\n",
    "        smoothed_statistic = [s0]\n",
    "        n = x.shape[0]\n",
    "        for i in range(1, n):\n",
    "            s1 = alpha * x[i] + (1 - alpha) * s0\n",
    "            smoothed_statistic.append(s1)\n",
    "            s0 = s1\n",
    "        smoothed_statistic = np.array(smoothed_statistic)\n",
    "        return smoothed_statistic\n",
    "\n",
    "    def PandaSmoother(self, x):\n",
    "        \"\"\"\n",
    "        Provide exponential weighted functions. \n",
    "        Decay in terms of span, 𝛼 = 2/(𝑠𝑝𝑎𝑛+1), for 𝑠𝑝𝑎𝑛≥1.\n",
    "        \"\"\"\n",
    "        return pd.DataFrame(x).ewm(span=20).mean()\n",
    "\n",
    "class Evaluator:\n",
    "    def __init__(self, X_test, y_test, y_pred, model):\n",
    "        self.X_test = X_test\n",
    "        self.y_test = y_test\n",
    "        self.y_pred = y_pred\n",
    "        self.model = model\n",
    "\n",
    "    def confusion_matrix(self):\n",
    "        \"\"\"\n",
    "        Creating Confusion Matrix from the predicted y values\n",
    "        \"\"\"\n",
    "        self.cm = confusion_matrix(self.y_test, self.y_pred)\n",
    "\n",
    "    def get_performance_metrics(self):\n",
    "        \"\"\"\n",
    "        returns accuracy, recall, precision, specificity\n",
    "        \"\"\"\n",
    "        self.confusion_matrix()\n",
    "\n",
    "        accuracy = (\n",
    "                float((self.cm[0][0] + self.cm[1][1])) /\n",
    "                (self.cm[0][0] + self.cm[0][1] + self.cm[1][0] +\n",
    "                 self.cm[1][1])\n",
    "        )\n",
    "        precision = (\n",
    "                float((self.cm[1][1])) /\n",
    "                (self.cm[1][1] + self.cm[0][1])\n",
    "        )\n",
    "        recall = (\n",
    "                float((self.cm[1][1])) /\n",
    "                (self.cm[1][1] + self.cm[1][0])\n",
    "        )\n",
    "        specificity = (\n",
    "                float((self.cm[0][0])) /\n",
    "                (self.cm[0][0] + self.cm[0][1])\n",
    "        )\n",
    "\n",
    "        return accuracy, recall, precision, specificity\n",
    "\n",
    "    def draw_ROC(self, use_probabilities=True):\n",
    "        y_prob = self.model.predict_proba(self.X_test)\n",
    "        y_pred = self.model.predict(self.X_test)\n",
    "        prob_estimate = y_prob[:, 1]\n",
    "        \n",
    "        if use_probabilities:\n",
    "            fpr, tpr, threshold = roc_curve(self.y_test, prob_estimate)\n",
    "        else:\n",
    "            fpr, tpr, threshold = roc_curve(self.y_test, y_pred)\n",
    "        area = auc(fpr, tpr)\n",
    "        plt.figure()\n",
    "        plt.plot(fpr, tpr, linewidth=2.0, label=\"ROC curve (Area= %0.2f)\" % area)\n",
    "        plt.plot([0, 1], [0, 1], \"r--\")\n",
    "        plt.xlabel(\"False Postive Rate\")\n",
    "        plt.ylabel(\"True Positive Rate\")\n",
    "        plt.legend(loc=\"lower right\")\n",
    "\n",
    "    def oob_vs_n_trees(self, max_trees, X_train, y_train):\n",
    "        # First set up the figure, the axis, and the plot element we want to animate\n",
    "        print(\"\")\n",
    "        print(\"Number of Trees\\t\\tOOB Error Rate\")\n",
    "        fig = plt.figure()\n",
    "        ax = plt.axes(xlim=(0, max_trees), ylim=(0, 1))\n",
    "        line, = ax.plot([], [], lw=2)\n",
    "\n",
    "        # initialization function: plot the background of each frame\n",
    "        def init():\n",
    "            line.set_data([], [])\n",
    "            return line,\n",
    "\n",
    "        number_of_trees = range(2, max_trees + 1)\n",
    "        oob_errors = []\n",
    "\n",
    "        # animation function.  This is called sequentially\n",
    "        def animate(i):\n",
    "            model = RandomForestClassifier(warm_start=True, oob_score=True, n_estimators=i)\n",
    "            model.fit(X_train, y_train)\n",
    "            oob_error = 1 - model.oob_score_\n",
    "            oob_errors.append(oob_error)\n",
    "            print(\"{}\\t\\t\\t{}\".format(i, oob_error))\n",
    "\n",
    "            line.set_data(number_of_trees[:len(oob_errors)], oob_errors)\n",
    "            return line,\n",
    "\n",
    "        # call the animator.  blit=True means only re-draw the parts that have changed.\n",
    "        anim = animation.FuncAnimation(fig, animate, init_func=init, frames=number_of_trees, interval=100, blit=True,\n",
    "                                       repeat=False)\n",
    "        plt.xlabel(\"Number of trees\")\n",
    "        plt.ylabel(\"OOB error\")\n",
    "        plt.show()\n",
    "\n",
    "    def plot_classification_results(self):\n",
    "        self.confusion_matrix()\n",
    "        x = [i + 3.0 for i in range(4)]\n",
    "        xlabel = [\"TP\", \"FN\", \"FP\", \"TN\"]\n",
    "        plt.figure()\n",
    "        plt.grid(True)\n",
    "        plt.bar(x, self.cm.reshape(-1), color=np.random.random((4, 3)))\n",
    "        plt.xticks([i + 3.0 for i in range(4)], xlabel)\n",
    "        plt.show(block=False)\n",
    "\n",
    "        \n",
    "# exponential weighted moving average\n",
    "def ema(x, p):\n",
    "    x = x.squeeze()\n",
    "    prev_ema = x[:p].mean()\n",
    "    ema = [prev_ema]\n",
    "    m = len(x)\n",
    "    multiplier = 2 / float(p + 1)\n",
    "    for i in range(p, m):\n",
    "        cur_ema = (x[i] - prev_ema) * multiplier + prev_ema\n",
    "        prev_ema = cur_ema\n",
    "        ema.append(cur_ema)\n",
    "    return np.array(ema)\n",
    "\n",
    "\n",
    "# Relative Strength Index\n",
    "def getRSI(x):\n",
    "    x = x.squeeze()\n",
    "    n = len(x)\n",
    "    x0 = x[:n - 1]\n",
    "    x1 = x[1:]\n",
    "    change = x1 - x0\n",
    "    avgGain = []\n",
    "    avgLoss = []\n",
    "    loss = 0\n",
    "    gain = 0\n",
    "    for i in range(14):\n",
    "        if change[i] > 0:\n",
    "            gain += change[i]\n",
    "        elif change[i] < 0:\n",
    "            loss += abs(change[i])\n",
    "    averageGain = gain / 14.0\n",
    "    averageLoss = loss / 14.0\n",
    "    avgGain.append(averageGain)\n",
    "    avgLoss.append(averageLoss)\n",
    "    for i in range(14, n - 1):\n",
    "        if change[i] >= 0:\n",
    "            avgGain.append((avgGain[-1] * 13 + change[i]) / 14.0)\n",
    "            avgLoss.append((avgLoss[-1] * 13) / 14.0)\n",
    "        else:\n",
    "            avgGain.append((avgGain[-1] * 13) / 14.0)\n",
    "            avgLoss.append((avgLoss[-1] * 13 + abs(change[i])) / 14.0)\n",
    "    avgGain = np.array(avgGain)\n",
    "    avgLoss = np.array(avgLoss)\n",
    "    RS = avgGain / avgLoss\n",
    "    RSI = 100 - (100 / (1 + RS))\n",
    "    return np.c_[RSI, x1[13:]]\n",
    "\n",
    "\n",
    "def getStochasticOscillator(x):\n",
    "    high = x[:, 1].squeeze()\n",
    "    low = x[:, 2].squeeze()\n",
    "    close = x[:, 3].squeeze()\n",
    "    n = len(high)\n",
    "    highestHigh = []\n",
    "    lowestLow = []\n",
    "    for i in range(n - 13):\n",
    "        highestHigh.append(high[i:i + 14].max())\n",
    "        lowestLow.append(low[i:i + 14].min())\n",
    "    highestHigh = np.array(highestHigh)\n",
    "    lowestLow = np.array(lowestLow)\n",
    "    k = 100 * ((close[13:] - lowestLow) / (highestHigh - lowestLow))\n",
    "\n",
    "    return np.c_[k, close[13:]]\n",
    "\n",
    "\n",
    "def getWilliams(x):\n",
    "    high = x[:, 1].squeeze()\n",
    "    low = x[:, 2].squeeze()\n",
    "    close = x[:, 3].squeeze()\n",
    "    n = len(high)\n",
    "    highestHigh = []\n",
    "    lowestLow = []\n",
    "    for i in range(n - 13):\n",
    "        highestHigh.append(high[i:i + 14].max())\n",
    "        lowestLow.append(low[i:i + 14].min())\n",
    "    highestHigh = np.array(highestHigh)\n",
    "    lowestLow = np.array(lowestLow)\n",
    "    w = -100 * ((highestHigh - close[13:]) / (highestHigh - lowestLow))\n",
    "    return np.c_[w, close[13:]]\n",
    "\n",
    "\n",
    "def getMACD(close):\n",
    "    ma1 = ema(close.squeeze(), 12)\n",
    "    ma2 = ema(close.squeeze(), 26)\n",
    "    macd = ma1[14:] - ma2\n",
    "    return np.c_[macd, close[len(close) - len(macd):]]\n",
    "\n",
    "\n",
    "def getPriceRateOfChange(close, n_days):\n",
    "    close = close.squeeze()\n",
    "    n = len(close)\n",
    "    x0 = close[:n - n_days]\n",
    "    x1 = close[n_days:]\n",
    "    PriceRateOfChange = (x1 - x0) / x0\n",
    "    return np.c_[PriceRateOfChange, x1]\n",
    "\n",
    "\n",
    "def getOnBalanceVolume(X):\n",
    "    close = X[:, 3].squeeze()\n",
    "    volume = X[:, 4].squeeze()[1:]\n",
    "    n = len(close)\n",
    "    x0 = close[:n - 1]\n",
    "    x1 = close[1:]\n",
    "    change = x1 - x0\n",
    "    OBV = []\n",
    "    prev_OBV = 0\n",
    "\n",
    "    for i in range(n - 1):\n",
    "        if change[i] > 0:\n",
    "            current_OBV = prev_OBV + volume[i]\n",
    "        elif change[i] < 0:\n",
    "            current_OBV = prev_OBV - volume[i]\n",
    "        else:\n",
    "            current_OBV = prev_OBV\n",
    "        OBV.append(current_OBV)\n",
    "        prev_OBV = current_OBV\n",
    "    OBV = np.array(OBV)\n",
    "    return np.c_[OBV, x1]\n",
    "\n",
    "def getData(CSVFile, days=None):\n",
    "    smoother = DataPreprocessor()\n",
    "    data = pd.read_csv(CSVFile)\n",
    "    data = data[::-1]  # reverse\n",
    "    if days is not None:\n",
    "        data = data[-days:]\n",
    "    ohclv_data = np.c_[data['Open'],\n",
    "                       data['High'],\n",
    "                       data['Low'],\n",
    "                       data['Close'],\n",
    "                       data['Volume']]\n",
    "    smoothened_ohclv_data = smoother.PandaSmoother(ohclv_data)\n",
    "    return smoothened_ohclv_data, np.array(data[\"Close\"]), list(data[\"Date\"])\n",
    "\n",
    "\n",
    "def getTechnicalIndicators(X, d):\n",
    "    RSI = getRSI(X[:, 3])\n",
    "    StochasticOscillator = getStochasticOscillator(X)\n",
    "    Williams = getWilliams(X)\n",
    "\n",
    "    MACD = getMACD(X[:, 3])\n",
    "    PROC = getPriceRateOfChange(X[:, 3], d)\n",
    "    OBV = getOnBalanceVolume(X)\n",
    "\n",
    "    min_len = min(len(RSI),\n",
    "                  len(StochasticOscillator),\n",
    "                  len(Williams),\n",
    "                  len(MACD),\n",
    "                  len(PROC),\n",
    "                  len(OBV))\n",
    "\n",
    "    RSI = RSI[len(RSI) - min_len:]\n",
    "    StochasticOscillator = StochasticOscillator[len(StochasticOscillator) - min_len:]\n",
    "    Williams = Williams[len(Williams) - min_len:]\n",
    "    MACD = MACD[len(MACD) - min_len:]\n",
    "    PROC = PROC[len(PROC) - min_len:]\n",
    "    OBV = OBV[len(OBV) - min_len:]\n",
    "\n",
    "    feature_matrix = np.c_[RSI[:, 0],\n",
    "                           StochasticOscillator[:, 0],\n",
    "                           Williams[:, 0],\n",
    "                           MACD[:, 0],\n",
    "                           PROC[:, 0],\n",
    "                           OBV[:, 0]]\n",
    "\n",
    "    return feature_matrix\n",
    "\n",
    "\n",
    "def prepareData(X, close, date, days):\n",
    "\n",
    "    feature_matrix = getTechnicalIndicators(X, days)\n",
    "\n",
    "    print(\"Size of feature matrix: \", feature_matrix.shape)\n",
    "\n",
    "    number_of_samples = feature_matrix.shape[0]\n",
    "    print(\"Number of samples: %d\" % number_of_samples)\n",
    "    date = date[len(date) - number_of_samples:]\n",
    "    close = close[len(close) - number_of_samples:]\n",
    "\n",
    "    # y0 = feature_matrix[:,-1][ :number_of_samples-d]\n",
    "    # y1 = feature_matrix[:,-1][d:]\n",
    "\n",
    "    y0 = close[:number_of_samples - days]\n",
    "    y1 = close[days:]\n",
    "\n",
    "    feature_matrix_1 = feature_matrix[:number_of_samples - days]\n",
    "    feature_matrix_2 = feature_matrix[number_of_samples - 1000:]\n",
    "    date = date[number_of_samples - 1000:]\n",
    "\n",
    "    # closeplot = feature_matrix[:,-1][number_of_samples - 1000:]\n",
    "    closeplot = close[number_of_samples - 1000:]\n",
    "    y = np.sign(y1 - y0)\n",
    "\n",
    "    print(\"y: \", y)\n",
    "\n",
    "    feature_matrix_1 = feature_matrix_1[:, range(6)]\n",
    "\n",
    "    return feature_matrix_1, y, feature_matrix_2[:, range(6)], closeplot, date\n",
    "\n",
    "\n",
    "def plotTradingStrategy(model, xplot, closeplot, Trading_Day, date):\n",
    "    colorMap = {-1.0: \"r\", 1.0: \"b\", 0.0: \"y\"}\n",
    "    tradeMap = {-1.0: \"Sell\", 1.0: \"Buy\", 0.0: \"Buy\"}\n",
    "    plt.figure()\n",
    "    plt.plot(closeplot, c=\"g\")\n",
    "    x = [xplot[i] for i in range(0, len(xplot), Trading_Day)]\n",
    "    y = [closeplot[i] for i in range(0, len(closeplot), Trading_Day)]\n",
    "    y_pred = model.predict(x)\n",
    "\n",
    "    c = [colorMap[y_pred[i]] for i in range(len(y_pred))]\n",
    "\n",
    "    df = pd.DataFrame(np.c_[[i + 1 for i in range(0, len(xplot), Trading_Day)], x, y, [tradeMap[y_pred[i]] for i in\n",
    "                                                                                       range(len(y_pred))]],\n",
    "                      columns=[\"Day\", \"RSI\", \"Stochastic Oscillator\", \"Williams\", \"MACD\", \"Price Rate Of Change\",\n",
    "                               \"On Balance Volume\", \"Close\", \"Buy/Sell\"])\n",
    "    df.to_csv(\"AAPLBuySellTradePoints.csv\", index=False)\n",
    "\n",
    "    plt.scatter([i for i in range(0, len(xplot), Trading_Day)], y, c=c)\n",
    "    # plt.xticks([i for i in xrange(0,len(xplot),Trading_Day)],[date[i] for i in xrange(0,len(xplot),Trading_Day)])\n",
    "    red_patch = mpatches.Patch(color='red', label='Sell')\n",
    "    blue_patch = mpatches.Patch(color=\"blue\", label=\"Buy\")\n",
    "    plt.legend(handles=[red_patch, blue_patch])\n",
    "    plt.xlabel(\"Time\")\n",
    "    plt.ylabel(\"Closing price\")\n",
    "    plt.title(\"Trading strategy for {} days trading window\".format(Trading_Day))\n",
    "    plt.savefig(\"TradingStrategy.png\")\n",
    "    plt.show(block=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2014-11-03</td>\n",
       "      <td>553.979065</td>\n",
       "      <td>556.372498</td>\n",
       "      <td>551.715271</td>\n",
       "      <td>553.699829</td>\n",
       "      <td>553.699829</td>\n",
       "      <td>1382200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014-11-04</td>\n",
       "      <td>551.485901</td>\n",
       "      <td>553.979065</td>\n",
       "      <td>547.796021</td>\n",
       "      <td>552.592834</td>\n",
       "      <td>552.592834</td>\n",
       "      <td>1244200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014-11-05</td>\n",
       "      <td>555.275513</td>\n",
       "      <td>555.275513</td>\n",
       "      <td>542.560425</td>\n",
       "      <td>544.425293</td>\n",
       "      <td>544.425293</td>\n",
       "      <td>2032200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014-11-06</td>\n",
       "      <td>544.006409</td>\n",
       "      <td>545.387634</td>\n",
       "      <td>539.488831</td>\n",
       "      <td>540.555908</td>\n",
       "      <td>540.555908</td>\n",
       "      <td>1333200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014-11-07</td>\n",
       "      <td>544.714478</td>\n",
       "      <td>544.714478</td>\n",
       "      <td>537.195129</td>\n",
       "      <td>539.528748</td>\n",
       "      <td>539.528748</td>\n",
       "      <td>1633700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Open        High         Low       Close   Adj Close  \\\n",
       "Date                                                                     \n",
       "2014-11-03  553.979065  556.372498  551.715271  553.699829  553.699829   \n",
       "2014-11-04  551.485901  553.979065  547.796021  552.592834  552.592834   \n",
       "2014-11-05  555.275513  555.275513  542.560425  544.425293  544.425293   \n",
       "2014-11-06  544.006409  545.387634  539.488831  540.555908  540.555908   \n",
       "2014-11-07  544.714478  544.714478  537.195129  539.528748  539.528748   \n",
       "\n",
       "             Volume  \n",
       "Date                 \n",
       "2014-11-03  1382200  \n",
       "2014-11-04  1244200  \n",
       "2014-11-05  2032200  \n",
       "2014-11-06  1333200  \n",
       "2014-11-07  1633700  "
      ]
     },
     "execution_count": 727,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "'activision blizzard','amazon','apple','EA','facebook','google','groupon','hackett group','horizon','intel','microsoft',\n",
    "'netflix','opko health','papa johns','pepsi co',\n",
    "'Scientific Games Corporation',\n",
    "'starbucks','tesla','The Medicines Company','yahoo'\n",
    "\"\"\"\n",
    "\n",
    "# data_folders=['activision blizzard','amazon','apple','EA','facebook','google','groupon','hackett group','horizon','intel','microsoft',\n",
    "# 'netflix','opko health','papa johns','pepsi co',\n",
    "# 'Scientific Games Corporation',\n",
    "# 'starbucks','tesla','The Medicines Company','yahoo']\n",
    "# path = r'/' \n",
    "# all_files = glob.glob(path + \"/*.csv\")\n",
    "\n",
    "\n",
    "data = pd.read_csv('Dataset/GOOG.csv', sep=\",\", converters={0: lambda x: datetime.strptime(x, \"%Y-%m-%d\")})\n",
    "data = data.set_index('Date')\n",
    "data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a3d129810>]"
      ]
     },
     "execution_count": 731,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(data[\"Close\"][1000:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of feature matrix:  (1168, 6)\n",
      "Number of samples: 1168\n",
      "y:  [ 1.  1. -1. ... -1.  1.  1.]\n",
      "len X: 1078\n",
      "len y: 1078\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stock_symbol = \"GOOG\"\n",
    "days = 90\n",
    "\n",
    "filename = stock_symbol + \".csv\"\n",
    "csv_file = os.path.join(\"Dataset\", filename)\n",
    "ohclv_data, close, date = getData(csv_file, days=2000)\n",
    "\n",
    "plt.plot(ohclv_data[3])\n",
    "\n",
    "ohclv_data = np.array(ohclv_data)\n",
    "X, y, xplot, closeplot, dateplot = prepareData(ohclv_data, close, date, days)\n",
    "y[y == 0] = 1\n",
    "print(\"len X:\", len(X))\n",
    "print(\"len y:\", len(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1078\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([837.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 241.]),\n",
       " array([-1. , -0.8, -0.6, -0.4, -0.2,  0. ,  0.2,  0.4,  0.6,  0.8,  1. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 716,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(len(y))\n",
    "hist(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Splitting Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_data(X, y, test_factor=0.2):\n",
    "    # Use the last 20% of the time series as test data.\n",
    "    # The first elements contains the older data.\n",
    "    test_len = int(len(X) * test_factor)\n",
    "    X_test = X[-test_len:]\n",
    "    y_test = y[-test_len:]\n",
    "    X_train = X[:-test_len]\n",
    "    y_train = y[:-test_len]\n",
    "    return X_train, X_test, y_train, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_data(X, y, test_factor=0.2):\n",
    "#     Use the last 20% of the time series as test data.\n",
    "#     The first elements contains the older data.\n",
    "    test_factor=0.2\n",
    "    test_len = int(len(X) * test_factor)\n",
    "    X_test = X[-test_len:]\n",
    "    y_test = y[-test_len:]\n",
    "    X_train = X[:-test_len]\n",
    "    y_train = y[:-test_len]\n",
    "    \n",
    "    X_train = np.column_stack((X_train, y_train))\n",
    "    print(X_train[0])\n",
    "    np.random.shuffle(X_train)\n",
    "    y_train = np.asarray([i[-1] for i in X_train])\n",
    "    temp = np.asarray([i[:-1] for i in X_train])\n",
    "    X_train = temp\n",
    "    return X_train, X_test, y_train, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 7.92681150e+00  1.25727037e+01 -8.74272963e+01 -1.61217244e+01\n",
      " -1.10420276e-01 -4.31075904e+07  1.00000000e+00]\n",
      "<class 'numpy.ndarray'>\n",
      "1.0\n",
      "n_train1: 808\n",
      "n_test1: 270\n",
      "n_train2: 863\n",
      "n_test2: 215\n"
     ]
    }
   ],
   "source": [
    "X_train1, X_test1, y_train1, y_test1 = train_test_split(X, y)\n",
    "X_train2, X_test2, y_train2, y_test2 = split_data(X, y)\n",
    "\n",
    "print(type(X_train2))\n",
    "print((y_train2[0]))\n",
    "\n",
    "print(\"n_train1:\", len(X_train1))\n",
    "print(\"n_test1:\", len(X_test1))\n",
    "print(\"n_train2:\", len(X_train2))\n",
    "print(\"n_test2:\", len(X_test2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model 1 score: 0.93\n",
      "model 2 score: 0.80\n"
     ]
    }
   ],
   "source": [
    "model1 = RandomForestClassifier(n_estimators=100, criterion=\"entropy\", random_state=0)\n",
    "model1.fit(X_train1, y_train1)\n",
    "y_pred1 = model1.predict(X_test1)\n",
    "\n",
    "model2 = RandomForestClassifier(n_estimators= 80, criterion=\"entropy\", random_state=0)\n",
    "model2.fit(X_train2, y_train2)\n",
    "y_pred2 = model2.predict(X_test2)\n",
    "\n",
    "print(\"model 1 score: %.2f\"  % model1.score(X_test1, y_test1))\n",
    "print(\"model 2 score: %.2f\"  % model2.score(X_test2, y_test2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluating Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "## Confusion matrix metrics ##\n",
      "Accuracy: 0.93\n",
      "Recall: 0.85\n",
      "Precision: 0.85\n",
      "Specificity: 0.95\n"
     ]
    }
   ],
   "source": [
    "Eval1 = Evaluator(X_test1, y_test1, y_pred1, model1)\n",
    "accuracy, recall, precision, specificity = Eval1.get_performance_metrics()\n",
    "\n",
    "print(\"## Confusion matrix metrics ##\")\n",
    "print(\"Accuracy: %.2f\" % accuracy)\n",
    "print(\"Recall: %.2f\" % recall)\n",
    "print(\"Precision: %.2f\" % precision)\n",
    "print(\"Specificity: %.2f\" % specificity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "## Confusion matrix metrics ##\n",
      "Accuracy: 0.80\n",
      "Recall: 0.30\n",
      "Precision: 0.26\n",
      "Specificity: 0.88\n"
     ]
    }
   ],
   "source": [
    "Eval2 = Evaluator(X_test2, y_test2, y_pred2, model2)\n",
    "accuracy, recall, precision, specificity = Eval2.get_performance_metrics()\n",
    "\n",
    "print(\"## Confusion matrix metrics ##\")\n",
    "print(\"Accuracy: %.2f\" % accuracy)\n",
    "print(\"Recall: %.2f\" % recall)\n",
    "print(\"Precision: %.2f\" % precision)\n",
    "print(\"Specificity: %.2f\" % specificity)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classification Result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 689,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Eval1.plot_classification_results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 690,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Eval2.plot_classification_results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 691,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Eval1.draw_ROC(use_probabilities=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 692,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Eval2.draw_ROC(use_probabilities=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 693,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "187\n",
      "[[  0  83]\n",
      " [  0 187]]\n",
      "## Confusion matrix metrics ##\n",
      "Accuracy: 0.69\n",
      "Recall: 1.00\n",
      "Precision: 0.69\n",
      "Specificity: 0.00\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "clf = MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(6, 1), random_state=1)\n",
    "clf.fit(X_train1, y_train1)\n",
    "y_prednew = clf.predict(X_test1)\n",
    "cm = confusion_matrix(y_test1, y_prednew)\n",
    "count = 0\n",
    "for i in y_test1:\n",
    "    if i == 1.0:\n",
    "        count+=1\n",
    "print(count)\n",
    "\n",
    "        \n",
    "print(cm)\n",
    "\n",
    "EvalNN = Evaluator(X_test1, y_test1, y_prednew, clf)\n",
    "accuracy, recall, precision, specificity = EvalNN.get_performance_metrics()\n",
    "\n",
    "print(\"## Confusion matrix metrics ##\")\n",
    "print(\"Accuracy: %.2f\" % accuracy)\n",
    "print(\"Recall: %.2f\" % recall)\n",
    "print(\"Precision: %.2f\" % precision)\n",
    "print(\"Specificity: %.2f\" % specificity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 694,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5348837209302325\n",
      "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
      "[ 1. -1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1.  1. -1.  1. -1.  1. -1.\n",
      "  1.  1. -1.  1. -1.  1.  1.  1.  1. -1. -1.  1.  1.  1. -1.  1. -1.  1.\n",
      " -1.  1. -1.  1.  1.  1. -1.  1.  1. -1.  1.  1. -1.  1.  1.  1.  1.  1.\n",
      "  1.  1.  1. -1.  1.  1.  1. -1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.\n",
      "  1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1.  1.  1.  1.\n",
      "  1.  1.  1.  1.  1.  1. -1. -1. -1.  1. -1.  1.  1.  1. -1.  1.  1.  1.\n",
      "  1.  1.  1.  1.  1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1.  1.  1.\n",
      " -1.  1.  1. -1.  1.  1.  1. -1. -1.  1.  1. -1. -1. -1.  1.  1.  1.  1.\n",
      " -1. -1.  1.  1.  1.  1. -1. -1. -1.  1. -1.  1. -1. -1.  1.  1.  1.  1.\n",
      "  1.  1.  1. -1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1. -1.  1.  1.\n",
      " -1. -1.  1. -1.  1. -1.  1. -1.  1.  1.  1.  1. -1.  1. -1.  1.  1. -1.\n",
      " -1.  1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1.  1.\n",
      "  1. -1.  1. -1. -1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1.\n",
      "  1. -1.  1.  1. -1.  1.  1.  1. -1. -1.  1.  1.  1.  1. -1.  1.  1. -1.\n",
      " -1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1. -1.  1.  1.  1. -1.  1.  1.]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "clf = MLPClassifier(solver='lbfgs', alpha=1e-3,hidden_layer_sizes=(6,3,1), random_state = 0, learning_rate = 'adaptive')\n",
    "clf.fit(X_train2, y_train2)\n",
    "y_prednew = clf.predict(X_test2)\n",
    "cm = confusion_matrix(y_test2, y_prednew)\n",
    "count = 0\n",
    "l = len(y_test2)\n",
    "for i in range(l):\n",
    "    if y_test2[i] == y_prednew[i]:\n",
    "        count+=1\n",
    "print(count/l)\n",
    "print(y_prednew)\n",
    "print(y_test1)\n",
    "\n",
    "# EvalNN = Evaluator(X_test2, y_test2, y_prednew, clf)\n",
    "# accuracy, recall, precision, specificity = EvalNN.get_performance_metrics()\n",
    "\n",
    "# print(\"## Confusion matrix metrics ##\")\n",
    "# print(\"Accuracy: %.2f\" % accuracy)\n",
    "# print(\"Recall: %.2f\" % recall)\n",
    "# print(\"Precision: %.2f\" % precision)\n",
    "# print(\"Specificity: %.2f\" % specificity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 695,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.  1.  1. ... -1. -1. -1.]\n",
      "0.5348837209302325\n",
      "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
      "[ 1. -1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1.  1. -1.  1. -1.  1. -1.\n",
      "  1.  1. -1.  1. -1.  1.  1.  1.  1. -1. -1.  1.  1.  1. -1.  1. -1.  1.\n",
      " -1.  1. -1.  1.  1.  1. -1.  1.  1. -1.  1.  1. -1.  1.  1.  1.  1.  1.\n",
      "  1.  1.  1. -1.  1.  1.  1. -1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.\n",
      "  1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1.  1.  1.  1.\n",
      "  1.  1.  1.  1.  1.  1. -1. -1. -1.  1. -1.  1.  1.  1. -1.  1.  1.  1.\n",
      "  1.  1.  1.  1.  1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1.  1.  1.\n",
      " -1.  1.  1. -1.  1.  1.  1. -1. -1.  1.  1. -1. -1. -1.  1.  1.  1.  1.\n",
      " -1. -1.  1.  1.  1.  1. -1. -1. -1.  1. -1.  1. -1. -1.  1.  1.  1.  1.\n",
      "  1.  1.  1. -1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1. -1.  1.  1.\n",
      " -1. -1.  1. -1.  1. -1.  1. -1.  1.  1.  1.  1. -1.  1. -1.  1.  1. -1.\n",
      " -1.  1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1.  1.\n",
      "  1. -1.  1. -1. -1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1.\n",
      "  1. -1.  1.  1. -1.  1.  1.  1. -1. -1.  1.  1.  1.  1. -1.  1.  1. -1.\n",
      " -1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1. -1.  1.  1.  1. -1.  1.  1.]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "clf = SVC(gamma='auto')\n",
    "clf.fit(X_train2, y_train2)\n",
    "y_pred = clf.predict(X_test2)\n",
    "\n",
    "l = len(y_test2)\n",
    "count = 0\n",
    "print(y)\n",
    "for i in range(l):\n",
    "    if y_test2[i] == y_pred[i]:\n",
    "        count+=1\n",
    "print(count/l)\n",
    "print(y_pred)\n",
    "print(y_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 696,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8\n",
      "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
      "[ 1. -1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1.  1. -1.  1. -1.  1. -1.\n",
      "  1.  1. -1.  1. -1.  1.  1.  1.  1. -1. -1.  1.  1.  1. -1.  1. -1.  1.\n",
      " -1.  1. -1.  1.  1.  1. -1.  1.  1. -1.  1.  1. -1.  1.  1.  1.  1.  1.\n",
      "  1.  1.  1. -1.  1.  1.  1. -1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.\n",
      "  1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1.  1.  1.  1.\n",
      "  1.  1.  1.  1.  1.  1. -1. -1. -1.  1. -1.  1.  1.  1. -1.  1.  1.  1.\n",
      "  1.  1.  1.  1.  1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1.  1.  1.\n",
      " -1.  1.  1. -1.  1.  1.  1. -1. -1.  1.  1. -1. -1. -1.  1.  1.  1.  1.\n",
      " -1. -1.  1.  1.  1.  1. -1. -1. -1.  1. -1.  1. -1. -1.  1.  1.  1.  1.\n",
      "  1.  1.  1. -1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1. -1.  1.  1.\n",
      " -1. -1.  1. -1.  1. -1.  1. -1.  1.  1.  1.  1. -1.  1. -1.  1.  1. -1.\n",
      " -1.  1. -1.  1.  1.  1.  1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1.  1.\n",
      "  1. -1.  1. -1. -1.  1.  1.  1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1.\n",
      "  1. -1.  1.  1. -1.  1.  1.  1. -1. -1.  1.  1.  1.  1. -1.  1.  1. -1.\n",
      " -1.  1.  1. -1. -1.  1.  1.  1.  1.  1.  1. -1.  1.  1.  1. -1.  1.  1.]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "clf = KNeighborsClassifier(n_neighbors=5)\n",
    "clf.fit(X_train2, y_train2)\n",
    "\n",
    "y_pred = clf.predict(X_test2)\n",
    "\n",
    "l = len(y_test2)\n",
    "count = 0\n",
    "for i in range(l):\n",
    "    if y_test2[i] == y_pred[i]:\n",
    "        count+=1\n",
    "print(count/l)\n",
    "print(y_prednew)\n",
    "print(y_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8962962962962963\n",
      "[ 1. -1.  1.  1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1.  1. -1. -1.\n",
      " -1. -1.  1. -1. -1. -1. -1. -1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1.\n",
      " -1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1.  1.  1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1. -1.  1. -1.\n",
      " -1.  1.  1.  1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1.  1. -1. -1.  1.\n",
      " -1. -1. -1.  1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1.\n",
      "  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1.  1.  1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.\n",
      " -1.  1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1.\n",
      " -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1.  1.  1. -1. -1. -1.\n",
      "  1. -1. -1. -1. -1.  1.  1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1.\n",
      " -1. -1. -1. -1. -1.  1. -1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1. -1.]\n",
      "[ 1. -1.  1.  1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1.  1. -1. -1.\n",
      "  1. -1.  1. -1. -1.  1. -1. -1.  1. -1. -1. -1.  1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1.  1. -1. -1.  1. -1. -1.  1.  1. -1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1.\n",
      " -1.  1. -1.  1. -1. -1. -1. -1. -1.  1.  1. -1. -1. -1.  1. -1.  1.  1.\n",
      " -1. -1. -1.  1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1.\n",
      "  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.  1.\n",
      " -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1.  1.  1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.\n",
      " -1.  1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1.\n",
      " -1.  1.  1.  1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1. -1.  1. -1.  1. -1.  1. -1.  1. -1.  1.  1. -1. -1. -1.\n",
      "  1. -1. -1. -1. -1.  1.  1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1.\n",
      " -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "clf = AdaBoostClassifier(n_estimators=100,learning_rate=1 ,random_state=0)\n",
    "clf.fit(X_train1,y_train1)\n",
    "y_pred = clf.predict(X_test1)\n",
    "\n",
    "l = len(y_test1)\n",
    "count = 0\n",
    "for i in range(l):\n",
    "    if y_test1[i] == y_pred[i]:\n",
    "        count+=1\n",
    "print(count/l)\n",
    "print(y_pred)\n",
    "print(y_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9222222222222223\n",
      "[ 1. -1.  1.  1. -1. -1. -1.  1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.\n",
      " -1. -1.  1. -1. -1.  1. -1. -1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1.\n",
      "  1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.  1. -1. -1. -1.  1. -1. -1.  1.\n",
      " -1. -1. -1.  1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.\n",
      "  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.  1.\n",
      " -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1.  1.  1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.\n",
      " -1.  1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1.  1. -1. -1.  1. -1.  1. -1.  1. -1.  1. -1.  1.  1. -1. -1.  1.\n",
      "  1. -1. -1. -1. -1.  1.  1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1.\n",
      " -1. -1. -1. -1. -1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1.]\n",
      "[ 1. -1.  1.  1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1.  1. -1. -1.\n",
      "  1. -1.  1. -1. -1.  1. -1. -1.  1. -1. -1. -1.  1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1.  1. -1. -1.  1. -1. -1.  1.  1. -1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1.\n",
      " -1.  1. -1.  1. -1. -1. -1. -1. -1.  1.  1. -1. -1. -1.  1. -1.  1.  1.\n",
      " -1. -1. -1.  1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1.\n",
      "  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.  1.\n",
      " -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1.  1.  1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.\n",
      " -1.  1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1.\n",
      " -1.  1.  1.  1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1. -1.  1. -1.  1. -1.  1. -1.  1. -1.  1.  1. -1. -1. -1.\n",
      "  1. -1. -1. -1. -1.  1.  1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1.\n",
      " -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.]\n"
     ]
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "data_dmatrix = xgb.DMatrix(data=X,label=y)\n",
    "\n",
    "clf = xgb.XGBClassifier(objective ='reg:logistic', colsample_bytree = 0.5, learning_rate = 0.1,\n",
    "                max_depth = 5, alpha = 10, n_estimators = 100)\n",
    "clf.fit(X_train1,y_train1)\n",
    "y_pred = clf.predict(X_test1)\n",
    "\n",
    "l = len(y_test1)\n",
    "count = 0\n",
    "for i in range(l):\n",
    "    if y_test1[i] == y_pred[i]:\n",
    "        count+=1\n",
    "print(count/l)\n",
    "print(y_pred)\n",
    "print(y_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8962962962962963\n",
      "[ 1. -1.  1.  1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1. -1.  1. -1. -1.\n",
      "  1. -1.  1. -1. -1.  1. -1. -1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1.\n",
      "  1. -1. -1. -1.  1. -1. -1.  1. -1. -1.  1.  1. -1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1.  1. -1. -1.  1.\n",
      " -1. -1. -1.  1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1.  1.\n",
      "  1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1.  1.\n",
      " -1. -1. -1. -1. -1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1.\n",
      " -1. -1. -1. -1.  1.  1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.\n",
      " -1.  1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1.\n",
      " -1. -1.  1.  1. -1.  1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1. -1.  1. -1.  1.  1.  1.  1.  1. -1.  1.  1. -1. -1.  1.\n",
      " -1. -1. -1. -1. -1.  1.  1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1.\n",
      " -1. -1. -1. -1. -1.  1. -1. -1. -1.  1.  1. -1. -1.  1. -1. -1. -1. -1.]\n",
      "[ 1. -1.  1.  1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1.  1. -1. -1.\n",
      "  1. -1.  1. -1. -1.  1. -1. -1.  1. -1. -1. -1.  1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1.  1. -1. -1.  1. -1. -1.  1.  1. -1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1. -1.  1. -1.\n",
      " -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1.\n",
      " -1.  1. -1.  1. -1. -1. -1. -1. -1.  1.  1. -1. -1. -1.  1. -1.  1.  1.\n",
      " -1. -1. -1.  1. -1. -1.  1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1.\n",
      "  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.  1.\n",
      " -1. -1. -1. -1. -1. -1.  1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1.  1.  1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1.\n",
      " -1.  1. -1. -1.  1. -1.  1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1.\n",
      " -1.  1.  1.  1. -1. -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1.  1.\n",
      " -1. -1. -1. -1. -1.  1. -1.  1. -1.  1. -1.  1. -1.  1.  1. -1. -1. -1.\n",
      "  1. -1. -1. -1. -1.  1.  1.  1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1.\n",
      " -1. -1. -1. -1. -1. -1.  1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "clf = DecisionTreeClassifier(random_state=0)\n",
    "clf.fit(X_train1,y_train1)\n",
    "y_pred = clf.predict(X_test1)\n",
    "\n",
    "l = len(y_test1)\n",
    "count = 0\n",
    "for i in range(l):\n",
    "    if y_test1[i] == y_pred[i]:\n",
    "        count+=1\n",
    "print(count/l)\n",
    "print(y_pred)\n",
    "print(y_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
